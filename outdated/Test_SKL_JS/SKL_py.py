import numpy as np

#=====================================================================================================================

song1_cov = np.array([
[2941.24307693,   8.52134777, -75.57629659,1109.20320609,-515.94068915,   736.53946892,-187.14399948, 128.16572867,  12.11674654,-135.80967485,   155.84429367,-221.73978295, 207.15935782], 
[   8.52134777, 653.64827643, 310.99184394,-185.72470222, 185.84253085,     2.1053451 ,  50.17772801, -32.60113656,  22.16596073,  22.98229825,   -14.85181814,  94.03251853, -33.18497561], 
[ -75.57629659, 310.99184394, 668.12811691, 167.19645432, -29.82811494,   168.64070845,  23.55994865,  12.62516653,  24.47342807, -15.73260165,    28.50741512,  42.51211211,  19.54680639], [1109.20320609,-185.72470222, 167.19645432, 748.03470884,-252.18142685,   319.63283697, -77.34307415,  68.77448108, -13.52012257, -63.92064998,    78.45782718,-122.69256906, 109.7139559 ], 
[-515.94068915, 185.84253085, -29.82811494,-252.18142685, 317.76113661,  -140.7698069 ,  20.99754698, -27.76050373,  11.32520402,  49.53625548,   -39.30072121,  75.08442761, -41.41123531], [ 736.53946892,   2.1053451 , 168.64070845, 319.63283697,-140.7698069 ,   442.86609236, -16.56201584,  53.87941947,  94.76741547, -50.65362989,    70.54971896, -19.18291825,  72.50146314], 
[-187.14399948,  50.17772801,  23.55994865, -77.34307415,  20.99754698,   -16.56201584, 131.16179857,  19.15309988,  15.74894525,  25.12867131,    -3.47036704,  34.42172105, -20.37852948], 
[ 128.16572867, -32.60113656,  12.62516653,  68.77448108, -27.76050373,    53.87941947,  19.15309988,  91.30653366,  31.97596717,  -5.91513031,    28.8848414 ,  -4.06059106,  22.02341938], 
[  12.11674654,  22.16596073,  24.47342807, -13.52012257,  11.32520402,    94.76741547,  15.74894525,  31.97596717, 127.7838041 ,  12.50831894,    11.08933425,  40.93345385,   0.04366327], 
[-135.80967485,  22.98229825, -15.73260165, -63.92064998,  49.53625548,   -50.65362989,  25.12867131,  -5.91513031,  12.50831894,  79.05256245,     9.50750361,   6.0551683 ,   3.36514014], 
[ 155.84429367, -14.85181814,  28.50741512,  78.45782718, -39.30072121,    70.54971896,  -3.47036704,  28.8848414 ,  11.08933425,   9.50750361,    71.34167676,  12.17204216,  14.77289085], 
[-221.73978295,  94.03251853,  42.51211211,-122.69256906,  75.08442761,   -19.18291825,  34.42172105,  -4.06059106,  40.93345385,   6.0551683 ,    12.17204216,  98.37829682,  -4.41269769], 
[ 207.15935782, -33.18497561,  19.54680639, 109.7139559 , -41.41123531,    72.50146314, -20.37852948,  22.02341938,   0.04366327,   3.36514014,    14.77289085,  -4.41269769,  80.09894953]
]).flatten()
song1_m = np.asarray([-692.95306  , 173.50534  , -51.494907 ,  55.741478 , -23.526962 ,   29.248734 , -16.82424  ,   5.936065 ,   2.7149098,  -4.229291 ,   13.672986 , -11.684442 ,  12.167524 ]) 
song1 = np.concatenate((song1_m, song1_cov), axis=0)
song1.shape

song2_cov = np.array([
[ 7421.72159519, 1751.3042376 ,-1800.27920557,  581.69385292,  -1002.75691919,  212.19862689, -638.12227247,   20.97453644,   -144.77701433, -286.46632609,  210.211626  , -303.39048869,    166.76280776], [ 1751.3042376 , 1126.24885401, -377.04730618,   -6.01573473,     47.77935279, -238.70252974,    6.63891183,  -39.53990607,      0.7387623 ,  -16.85685899,   11.35273754,   71.52918922,    -48.37985038], [-1800.27920557, -377.04730618,  854.9440749 ,   94.78071757,    283.23964162,  147.70050237,  183.0923488 ,   82.16560937,     67.1430082 ,   80.96981994,  -24.74579482,   54.55787516,     15.38834495], [  581.69385292,   -6.01573473,   94.78071757,  376.9886836 ,      2.27718029,  202.67626536,  -28.75247726,   69.45455694,     29.96794928,   -5.380641  ,   41.09022681,  -47.79040322,     74.6519908 ], [-1002.75691919,   47.77935279,  283.23964162,    2.27718029,    467.50279744,  -59.12866403,  195.51651681,   21.71779687,     75.06563765,  100.34857429,  -37.72104013,  118.08412685,    -29.95180657], [  212.19862689, -238.70252974,  147.70050237,  202.67626536,    -59.12866403,  395.95636468,   14.14591316,  100.4281625 ,     17.83605485,   -9.73290974,   46.05238885,  -84.97696339,     87.45348139], [ -638.12227247,    6.63891183,  183.0923488 ,  -28.75247726,    195.51651681,   14.14591316,  265.53186335,   56.86698865,     49.95287731,   68.52566115,  -16.3195532 ,   70.92423425,    -34.1532779 ], [   20.97453644,  -39.53990607,   82.16560937,   69.45455694,     21.71779687,  100.4281625 ,   56.86698865,  140.52457798,     70.28064627,   31.48962438,   32.47587595,  -10.60429252,     29.00115903], [ -144.77701433,    0.7387623 ,   67.1430082 ,   29.96794928,     75.06563765,   17.83605485,   49.95287731,   70.28064627,    122.01868414,   72.83238068,   14.81710683,   26.48036595,     -7.3927604 ], [ -286.46632609,  -16.85685899,   80.96981994,   -5.380641  ,    100.34857429,   -9.73290974,   68.52566115,   31.48962438,     72.83238068,  112.01834601,   35.35223671,   33.34980499,    -11.14764727], [  210.211626  ,   11.35273754,  -24.74579482,   41.09022681,    -37.72104013,   46.05238885,  -16.3195532 ,   32.47587595,     14.81710683,   35.35223671,   92.47305198,   24.67676151,     20.13664491], [ -303.39048869,   71.52918922,   54.55787516,  -47.79040322,    118.08412685,  -84.97696339,   70.92423425,  -10.60429252,     26.48036595,   33.34980499,   24.67676151,  128.16161826,      9.04335851], [  166.76280776,  -48.37985038,   15.38834495,   74.6519908 ,    -29.95180657,   87.45348139,  -34.1532779 ,   29.00115903,     -7.3927604 ,  -11.14764727,   20.13664491,    9.04335851,    100.01395676]
]).flatten()
song2_m = np.asarray([-684.114   , 150.25163 , -57.20039 ,  74.55266 , -31.272036,  26.839827,  -22.842867,   9.103122,   6.711247,  -8.166785,  16.002844, -15.141054,    9.713406])
song2 = np.concatenate((song2_m, song2_cov), axis=0)
song2.shape


#get 13 mean and 13x13 cov as vectors
def symmetric_kullback_leibler(vec1, vec2):
    d = 13
    mean1 = np.empty([d, 1])
    mean1 = vec1[0:d]
    cov1 = np.empty([d,d])
    cov1 = vec1[d:].reshape(d, d)
    mean2 = np.empty([d, 1])
    mean2 = vec2[0:d]
    cov2 = np.empty([d,d])
    cov2 = vec2[d:].reshape(d, d)
    try:
        g_chol = np.linalg.cholesky(cov1)
        g_ui   = np.linalg.solve(g_chol,np.eye(d))
        icov1  = np.matmul(np.transpose(g_ui), g_ui)
        isinv1=1
    except np.linalg.LinAlgError as err:
        isinv1=0
    try:
        g_chol = np.linalg.cholesky(cov2)
        g_ui   = np.linalg.solve(g_chol,np.eye(d))
        icov2  = np.matmul(np.transpose(g_ui), g_ui)
        isinv2=1
    except np.linalg.LinAlgError as err:
        isinv2=0
    #================================
    if (isinv1==1) and (isinv2==1):
        temp_a = np.trace(np.matmul(cov1, icov2)) 
        #temp_a = traceprod(cov1, icov2) 
        print(temp_a)
        temp_b = np.trace(np.matmul(cov2, icov1))
        #temp_b = traceprod(cov2, icov1)
        print(temp_b)
        temp_c = np.trace(np.matmul((icov1 + icov2), np.outer((mean1 - mean2), (mean1 - mean2))))
        print(temp_c)        
        div = 0.25 * (temp_a + temp_b + temp_c - 2*d)
    else: 
        div = float('NaN')
        noninskl.add(1)
        print("ERROR: NON INVERTIBLE SINGULAR COVARIANCE MATRIX \n\n\n")    
    if div <= 0:
        #print "Temp_a: " + temp_a + "\n Temp_b: " + temp_b + "\n Temp_c: " + temp_c
        #div = div * (-1)
        negskl.add(1)
    if np.isnan(div):
        #div = np.inf
        nanskl.add(1)
        #div = None
    #print div
    return div

print(symmetric_kullback_leibler(song1, song2))





